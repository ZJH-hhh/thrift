// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>

#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <vector>
#include <unistd.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::match_service;
using namespace ::save_service;

struct Task {
    User user;
    std::string type;
};


struct Ready_queue {
    std::queue<Task> q;
    std::mutex mx;
    std::condition_variable cv;
}ready_queue;


class Pool {
    public:
        void save_result(int a, int b) {
            printf("Match Result: %d %d\n", a, b);

            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();

                int res = client.save_data("acs_6048", "a8296d06", a, b);

                if (res) puts("save_failed");
                else puts("save_success");

                transport->close();
            } catch (TException& tx) {
                std::cout << "ERROR: " << tx.what() << std::endl;
            }
        }

        void match() {
            while (users.size() > 1) {
                sort(users.begin(), users.end(), [&](User& a, User& b) {
                    return a.sorce < b.sorce;
                        });

                bool flag = false;
                for (uint32_t i = 1; i < users.size(); i ++ ) {
                    auto a = users[i - 1], b = users[i];
                    if (b.sorce - a.sorce <= 50) {
                        users.erase(users.begin() + i - 1, users.begin() + i + 1);
                        save_result(a.id, b.id);
                        flag = true;
                        break;
                    }
                }

                if (!flag) break;
            }
        }

        void add(User user) {
            users.push_back(user);
        }

        void remove(User user) {
            for (uint32_t i = 0; i < users.size(); i ++ )
                if (users[i].id == user.id){
                    users.erase(users.begin() + i);
                    break;
                }
        }

    private:
        std::vector<User> users;
}pool;


class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");

            std::unique_lock<std::mutex> lck(ready_queue.mx);
            ready_queue.q.push({user, "add"});
            ready_queue.cv.notify_all();

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");

            std::unique_lock<std::mutex> lck(ready_queue.mx);
            ready_queue.q.push({user, "remove"});
            ready_queue.cv.notify_all();

            return 0;
        }

};


void consume_task() {
    while (true) {
        std::unique_lock<std::mutex> lck(ready_queue.mx);
        if (ready_queue.q.empty()) {
            // ready_queue.cv.wait(lck);
            lck.unlock();
            pool.match();
            sleep(1);
        }
        else {
            auto t = ready_queue.q.front();
            ready_queue.q.pop();
            lck.unlock();

            if (t.type == "add") pool.add(t.user);
            else if (t.type == "remove") pool.remove(t.user);

            pool.match();
        }
    }
}


int main(int argc, char **argv) {
    int port = 9090;
    ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
    ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

    std::cout << "Start Match Server" << std::endl;

    std::thread matching_thread(consume_task);

    server.serve();
    return 0;
}

